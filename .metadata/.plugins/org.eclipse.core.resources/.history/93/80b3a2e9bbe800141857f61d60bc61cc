/**   
 *  This file is part of SimpleCalendar.
    
 *  SimpleCalendar is free software: you can redistribute it and/or modify   
 *  it under the terms of the GNU General Public License as published by   
 *  the Free Software Foundation, either version 3 of the License, or   
 *  (at your option) any later version.
     
 *  SimpleCalendar is distributed in the hope that it will be useful,   
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of   
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   
 *  GNU General Public License for more details.
 *  <http://www.gnu.org/licenses/>.
     
 */
package simple_calendar.simple_calendar;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.PriorityQueue;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.ScrollPane.ScrollBarPolicy;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;

public class MainWindow extends Application
{
	static public List<Event> eventList = new ArrayList<Event>();
	static public List<Task> taskList = new ArrayList<Task>();
	static public List<Day> days = new ArrayList<Day>();
	static public List<Integer> hoursOfWork;
	
	
	static private Stage thisStage;
	static private DatePickerNew simpleCal;
	
	static public int schedulingTechnique = 1;
	public static LocalTime classesEnd;
	private static TimeThread timeThread = new TimeThread();

	public void addAlarm(Alarm alarm)
	{
		timeThread.addAlarm(alarm);
		timeThread.start();
	}

	public static void start()
	{
		timeThread.start();
	}

	public void setStage(Stage stage)
	{
		thisStage = stage;
	}

	public void showStage()
	{
		thisStage.setTitle("Main Window");
		thisStage.show();
	}

	static public void update()
	{
//		 deleteOldEvents();
		
		LocalDate d = LocalDate.now();
		for(Event e: eventList)
		{
			if(e.dateOfEvent.isBefore(d))
			{
				if(e.getAlarm()!=null)
				{
					e.getAlarm().disableAlarm();
					System.out.println(e.name + " kaa alarm disabled");
				}
			}
		}
		
		Event.sortEventsByDate();
		MainWindow.simpleCal.setDayCells();
	}

	private static void deleteOldEvents()
	{
		LocalDate d = LocalDate.now();
		List<Event> list = new ArrayList<Event>();
		for (Event e : eventList)
		{
			if (!e.dateOfEvent.isBefore(d))
			{
				list.add(e);
			}
		}
		eventList = list;
	}

	@Override
	public void start(Stage stage) throws Exception
	{
		stage.setTitle("Make new Event");
		StackPane root = new StackPane();
		root.setId("root");
		Scene scene = new Scene(root, 600, 600);
		stage.setScene(scene);

		scene.getStylesheets().addAll(
				MainWindow.class.getResource("style/simple_calendar.css")
						.toExternalForm());

		VBox vbox = new VBox(20);
		vbox.setAlignment(Pos.TOP_CENTER);
		Label label = new Label("Calendar App");
		label.setId("NameLabel");
		label.setTextAlignment(TextAlignment.CENTER);

		Label enterDate = new Label("Enter the date");
		enterDate.setId("EnterDateLabel");
		enterDate.setAlignment(Pos.TOP_LEFT);

		HBox dateBox = new HBox(15);
		dateBox.setAlignment(Pos.BASELINE_CENTER);
		// final TextField dateField = new TextField("Selected date");
		// dateField.setEditable(false);
		// dateField.setDisable(true);

		simpleCal = new DatePickerNew();
		simpleCal.setAlignment(Pos.CENTER_LEFT);
		simpleCal.dateProperty().addListener(new ChangeListener<Date>()
		{
			@Override
			public void changed(ObservableValue<? extends Date> ov,
					Date oldDate, Date newDate)
			{
				// dateField.setText((new SimpleDateFormat("dd/MM/yyyy"))
				// .format(newDate));
			}
		});

		Button addEvent = new Button();
		addEvent.setText("Add New Event");
		addEvent.setOnAction(new EventHandler<ActionEvent>()
		{
			@Override
			public void handle(ActionEvent e)
			{
				Stage stage = new Stage();
				// Fill stage with content
				try
				{
					addEventDetailsWindow(stage);
					stage.show();
				} catch (Exception e1)
				{
					System.out.println("Couldn't load EventPage");
					e1.printStackTrace();
				}
			}
		});

		Button addTask = new Button();
		addTask.setText("Add New Task");
		addTask.setOnAction(new EventHandler<ActionEvent>()
		{
			@Override
			public void handle(ActionEvent e)
			{
				Stage stage = new Stage();
				// Fill stage with content
				try
				{
					addTaskDetailsWindow(stage);
					stage.show();
				} catch (Exception e1)
				{
					System.out.println("Couldn't load TaskPage");
					e1.printStackTrace();
				}
			}

		});

		Button login = new Button();
		login.setText("Login to Sync");
		login.setOnAction(new EventHandler<ActionEvent>()
		{
			@Override
			public void handle(ActionEvent e)
			{
				Stage stage = new Stage();
				// Fill stage with content
				try
				{
					showLoginWindow(stage);
					stage.show();
				} catch (Exception e1)
				{
					System.out.println("Couldn't load LoginWindow");
					e1.printStackTrace();
				}
			}
		});

		HBox buttonHolder = new HBox(10);
		buttonHolder.setAlignment(Pos.BASELINE_CENTER);
		buttonHolder.getChildren().addAll(addEvent, addTask);

		Button showAllEvents = new Button();
		showAllEvents.setText("Show All Events");
		showAllEvents.setOnAction(new EventHandler<ActionEvent>()
		{
			@Override
			public void handle(ActionEvent e)
			{
				Stage stage = new Stage();
				try
				{
					showEventDetailsWindow(stage);
					stage.show();
				} catch (Exception e1)
				{
					System.out.println("Couldn't load AllEventsPage");
					e1.printStackTrace();
				}
			}

		});
		
		Button showAllTasks = new Button();
		showAllTasks.setText("Show All Tasks");
		showAllTasks.setOnAction(new EventHandler<ActionEvent>()
		{
			@Override
			public void handle(ActionEvent e)
			{
				Stage stage = new Stage();
				try
				{
					showTaskDetailsWindow(stage);
					stage.show();
				} catch (Exception e1)
				{
					System.out.println("Couldn't load AllEventsPage");
					e1.printStackTrace();
				}
			}

		});
		
		Button scheduleTasks = new Button();
		scheduleTasks.setText("Get Schedule");
		scheduleTasks.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent e) {
				Stage stage = new Stage();
				try {
					schedule(stage);
					stage.show();
				} catch (Exception e1) {
					System.out.println("Couldn't load AllEventsPage");
					e1.printStackTrace();
				}
			}

		});
		
		Button getNumTasks = new Button("Add tasks possible per day entry");
		getNumTasks.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent e) {
				Stage stage = new Stage();
				try {
					getNumTasksPerDay(stage);
					stage.show();
				} catch (Exception e1) {
					System.out.println("Couldn't load AllEventsPage");
					e1.printStackTrace();
				}
			}

		});
		
		ObservableList<String> list = FXCollections.observableArrayList("Round Robin","Priority",
				"Shortest First","Gain");
	    
		ComboBox<String> schedulingTech = new ComboBox<String>(list);
		schedulingTech.valueProperty().addListener(new ChangeListener<String>() {

			@Override
			public void changed(ObservableValue<? extends String> observable, 
					String oldValue, String newValue) {
				if(newValue.compareTo("Round Robin")==0)
					schedulingTechnique = 1;
				if(newValue.compareTo("Priority")==0)
					schedulingTechnique = 2;
				if(newValue.compareTo("Shortest First")==0)
					schedulingTechnique = 3;
				if(newValue.compareTo("Gain")==0)
					schedulingTechnique = 4;
				System.out.println(schedulingTechnique);
			}
		});
		
		HBox buttonHolder2 = new HBox(10);
		buttonHolder2.setAlignment(Pos.BASELINE_CENTER);
		buttonHolder2.getChildren().addAll(showAllEvents, showAllTasks);

	    
	    dateBox.getChildren().addAll(simpleCal);
		vbox.getChildren().addAll(label, enterDate, dateBox, login,
				buttonHolder, buttonHolder2,scheduleTasks, schedulingTech,getNumTasks);
		root.getChildren().add(vbox);
		thisStage = stage;
		thisStage.show();

	}

	public void getNumTasksPerDay(Stage stage) {
		stage.setTitle("Make new Event");
		StackPane root = new StackPane();
		root.setId("root");
		Scene scene = new Scene(root, 600, 400);
		stage.setScene(scene);

		scene.getStylesheets().addAll(
				MainWindow.class.getResource("style/simple_calendar.css")
						.toExternalForm());

		VBox vbox = new VBox(20);
		vbox.setAlignment(Pos.TOP_CENTER);
		
		ObservableList<String> list = FXCollections.observableArrayList("1","2","3","4","5",
				"6","7","8","9","10");
	    
		ComboBox<String> mon = new ComboBox<String>(list);
		ComboBox<String> tue = new ComboBox<String>(list);
		ComboBox<String> wed = new ComboBox<String>(list);
		ComboBox<String> thurs = new ComboBox<String>(list);
		ComboBox<String> fri = new ComboBox<String>(list);
		ComboBox<String> sat = new ComboBox<String>(list);
		ComboBox<String> sun = new ComboBox<String>(list);
		
		Button setNewValues = new Button("Set number of houres of work");
		setNewValues.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent e) {
				hoursOfWork = new ArrayList<Integer>();
				
				hoursOfWork.add(Integer.parseInt(mon.getValue()));
				hoursOfWork.add(Integer.parseInt(tue.getValue()));
				hoursOfWork.add(Integer.parseInt(wed.getValue()));
				hoursOfWork.add(Integer.parseInt(thurs.getValue()));
				hoursOfWork.add(Integer.parseInt(fri.getValue()));
				hoursOfWork.add(Integer.parseInt(sat.getValue()));
				hoursOfWork.add(Integer.parseInt(sun.getValue()));
				System.out.println("Number of hours set");
			}

		});
		
		
		vbox.getChildren().addAll(mon,tue,wed,thurs,fri,sat,sun,setNewValues);
		root.getChildren().add(vbox);
		
	}

	public void addTaskDetailsWindow(Stage stage)
	{
		Parent root;
		stage.setTitle("Add New Event");

		try
		{
			root = FXMLLoader.load(getClass().getResource("TaskWindow.fxml"));
		} catch (IOException e)
		{
			System.out.println("naa ho paaya");
			e.printStackTrace();
			return;
		}

		Scene scene = new Scene(root);
		stage.setScene(scene);
		stage.sizeToScene();
	}

	public void showEventDetailsWindow(Stage stage)
	{
		stage.setTitle("All Events");

		ScrollPane root = new ScrollPane();
		root.setId("root");
		Scene scene = new Scene(root, 400, 400);
		stage.setScene(scene);
		root.setHbarPolicy(ScrollBarPolicy.NEVER);
		root.setVbarPolicy(ScrollBarPolicy.ALWAYS);

		scene.getStylesheets().addAll(
				MainWindow.class.getResource("style/simple_calendar.css")
						.toExternalForm());

		VBox vbox = new VBox(20);
		vbox.setAlignment(Pos.TOP_LEFT);

		Label today = new Label("    Today:");
		today.setId("TodayLabel");
		today.setAlignment(Pos.TOP_LEFT);

		vbox.getChildren().add(today);
		int w = 0;
		LocalDate d = LocalDate.now();
		for (Event event : eventList)
		{
			if (!event.dateOfEvent.isBefore(d) && !event.dateOfEvent.isAfter(d))
			{
				w++;
				Label name = new Label("  " + w + ". " + event.name);
				name.setId("EventName");
				Label time = new Label("       " + event.timeOfEvent.toString()
						+ "  " + event.dateOfEvent.toString());
				time.setId("EventTime");
				Label details = new Label("        " + event.details);
				details.setId("EventDetails");
				Button edit = new Button("Edit");
				edit.setOnAction(new EventHandler<ActionEvent>()
				{
					@Override
					public void handle(ActionEvent e)
					{
						Stage stage = new Stage();
						// Fill stage with content
						try
						{
							editEventDetailsWindow(stage, event);
							stage.show();
						} catch (Exception e1)
						{
							System.out.println("Couldn't load TaskPage");
							e1.printStackTrace();
						}
					}

				});
				vbox.getChildren().addAll(name, time, details, edit);
			}
		}
		w = 0;
		Label upcoming = new Label("    Upcoming:");
		upcoming.setId("UpcomingLabel");
		upcoming.setAlignment(Pos.TOP_LEFT);
		vbox.getChildren().add(upcoming);

		for (Event event : eventList)
		{
			if (event.dateOfEvent.isAfter(d))
			{
				w++;
				Label name = new Label("  " + w + ". " + event.name);
				name.setId("EventName");
				Label time = new Label("       " + event.timeOfEvent.toString()
						+ "  " + event.dateOfEvent.toString());
				time.setId("EventTime");
				Label details = new Label("        " + event.details);
				details.setId("EventDetails");
				Button edit = new Button("Edit");
				edit.setOnAction(new EventHandler<ActionEvent>()
				{
					@Override
					public void handle(ActionEvent e)
					{
						Stage stage = new Stage();
						// Fill stage with content
						try
						{
							editEventDetailsWindow(stage, event);
							stage.show();
						} catch (Exception e1)
						{
							System.out.println("Couldn't load TaskPage");
							e1.printStackTrace();
						}
					}

				});
				vbox.getChildren().addAll(name, time, details, edit);
			}
		}
		root.setVmax(440);
		root.setPrefSize(115, 150);
		root.setContent(vbox);
	}
	
	
	public void showTaskDetailsWindow(Stage stage) {
		stage.setTitle("All Tasks");

		ScrollPane root = new ScrollPane();
		root.setId("root");
		Scene scene = new Scene(root, 500, 400);
		stage.setScene(scene);
		root.setHbarPolicy(ScrollBarPolicy.NEVER);
		root.setVbarPolicy(ScrollBarPolicy.ALWAYS);

		VBox vbox = new VBox(20);
		vbox.setAlignment(Pos.TOP_LEFT);

		scene.getStylesheets().addAll(
				MainWindow.class.getResource("style/simple_calendar.css")
						.toExternalForm());
		Label today = new Label("    Tasks:");
		today.setId("TodayLabel");
		today.setAlignment(Pos.TOP_LEFT);
		vbox.getChildren().add(today);
		int i=0;
		for(Task temp : taskList){
			i++;
			Label name = new Label("    " + i + ". "+ temp.name);
			name.setId("EventName");
			name.setAlignment(Pos.TOP_LEFT);
			vbox.getChildren().add(name);
	
			Label deadline = new Label("    Deadline: Time: " + temp.timeOfDeadline.toString() 
					+ "  Date: " + temp.dateOfDeadline.toString());
			deadline.setId("EventTime");
			deadline.setAlignment(Pos.TOP_LEFT);
			vbox.getChildren().add(deadline);
			
			Label details = new Label("    Priority: " + temp.priority + " Gain: " + temp.gain 
					+ " Time Expected: " + temp.timeExpected + " hours" + " Time spent: " + 
					+ temp.timeSpent +" hours");
			details.setId("EventDetails");
			details.setAlignment(Pos.TOP_LEFT);
			vbox.getChildren().add(details);
		}
		root.setVmax(440);
		root.setPrefSize(115, 150);
		root.setContent(vbox);
	}
	
	
	public void editEventDetailsWindow(Stage stage, Event event)
	{
		Parent root;
		stage.setTitle("Add New Event");

		try
		{
			// EventWindow ctrl = new EventWindow();
			FXMLLoader loader = new FXMLLoader(getClass().getResource(
					"EventWindow.fxml"));
			root = loader.load();
			for (int i = 0; i < eventList.size(); i++)
			{
				if (event.name.compareTo(eventList.get(i).name) == 0)
					eventList.remove(i);
			}
		} catch (IOException e)
		{
			System.out.println("naa ho paaya");
			e.printStackTrace();
			return;
		}

		Scene scene = new Scene(root);
		stage.setScene(scene);
		stage.sizeToScene();
	}

	public static void addDefaultEvents()
	{
		classesEnd = LocalTime.of(12, 00);

		eventList.add(new Event("Stagecoach", "CLT", 11, 4, 2015, 18, 00));
		eventList.add(new Event("Final", "BBall Court", 13, 4, 2015, 18, 00));
		eventList.add(new Event("Maths Tut", "Read and complete", 14, 4, 2015,
				14, 00));
		eventList.add(new Event("LMC Tut", "Read and complete", 14, 4, 2015,
				14, 00));
		eventList.add(new Event("POC Tut", "Read and complete", 14, 4, 2015,
				14, 00));

		taskList.add(new Task("Project", 25, 4, 2015, 6, 0, 25, 10, 5));
		taskList.add(new Task("POC assign", 25, 4, 2015, 6, 0, 5, 3, 3));
		taskList.add(new Task("Maths", 29, 4, 2015, 6, 0, 50, 4, 5));
		taskList.add(new Task("POC endsem", 30, 4, 2015, 6, 0, 50, 4, 4));
	}

	public void addEventDetailsWindow(Stage stage) throws Exception
	{
		Parent root;
		stage.setTitle("Add New Event");

		try
		{
			root = FXMLLoader.load(getClass().getResource("EventWindow.fxml"));
		} catch (IOException e)
		{
			System.out.println("naa ho paaya");
			e.printStackTrace();
			return;
		}

		Scene scene = new Scene(root);
		stage.setScene(scene);
		stage.sizeToScene();
	}

	public void showLoginWindow(Stage stage) throws Exception
	{
		Parent root;
		stage.setTitle("Login to sync Moodle Calendar");

		try
		{
			root = FXMLLoader.load(getClass().getResource("LoginWindow.fxml"));
		} catch (IOException e)
		{
			System.out.println("naa ho paaya");
			e.printStackTrace();
			return;
		}

		Scene scene = new Scene(root);
		stage.setScene(scene);
		stage.sizeToScene();
	}

	public static void schedule(Stage stage) 
	{
		PriorityQueue<Task> q = new PriorityQueue<>(new Comparator<Task>() 
		{
			public int compare(Task t1, Task t2) 
			{
				if (t1.weight < t2.weight)
					return 1;
				else
					return -1;
			}
		});
		
		//Scroll pane
		ScrollPane root = new ScrollPane();
		root.setId("root");
		Scene scene = new Scene(root, 400, 400);
		stage.setScene(scene);
		root.setHbarPolicy(ScrollBarPolicy.NEVER);
		root.setVbarPolicy(ScrollBarPolicy.ALWAYS);

		scene.getStylesheets().addAll(
				MainWindow.class.getResource("style/simple_calendar.css")
						.toExternalForm());

		VBox vbox = new VBox(20);
		vbox.setAlignment(Pos.TOP_LEFT);
		
		System.out.println("Scheduling tech = " + schedulingTechnique);
		
		for (Task t : taskList) 
		{
			Task p = new Task(t);
			if(p.timeSpent<p.timeExpected){
				p.calcWeight(0);
				q.add(p);
			}
		}

		List<Day> week = new ArrayList<Day>();
		
		Day d1 = new Day(LocalDate.now());
		
		for(int j=0;j<7;j++){
			d1.tasksOnTheDay = new ArrayList<Task>();
			Label today = new Label("    Day " + (j+1) + " " + d1.date.getDayOfWeek().toString() + ":");
			today.setId("TodayLabel");
			today.setAlignment(Pos.TOP_LEFT);
			vbox.getChildren().add(today);
			
			if(j==0){
				for(Day d : days){
					if(d.date.isEqual(d1.date)){
						d1.tasksDone = d.tasksDone;
						d1.noOfHours-=d.tasksDone;
						if(d1.noOfHours<0)
							d1.noOfHours = 0;
					}
				}
			}
			
			for(int i=0;i<d1.noOfHours;i++)
			{
				if(q.size()>0)
				{
					Task temp = q.poll();
					System.out.println(temp.name + " = " + temp.weight);
					
					Label name = new Label("    " + (i+1) + ". "+ temp.name);
					name.setId("EventName");
					name.setAlignment(Pos.TOP_LEFT);
					vbox.getChildren().add(name);

					Label deadline = new Label("    Deadline: Time: " + temp.timeOfDeadline.toString() 
							+ "  Date: " + temp.dateOfDeadline.toString());
					deadline.setId("EventTime");
					deadline.setAlignment(Pos.TOP_LEFT);
					vbox.getChildren().add(deadline);
					
					Label details = new Label("    Priority: " + temp.priority + " Gain: " + temp.gain 
							+ " Time Expected: " + temp.timeExpected + " hours");
					details.setId("EventDetails");
					details.setAlignment(Pos.TOP_LEFT);
					vbox.getChildren().add(details);
					
					if(j==0){
						Button done = new Button("Done");
						done.setOnAction(new EventHandler<ActionEvent>()
								{
							@Override
							public void handle(ActionEvent e)
							{
								for(Task w : taskList){
									if(w.name.compareTo(temp.name)==0){
										w.timeSpent++;
										System.out.println("One hour spent for " + w.name);
										for(Day d : days){
											if(d.date.isEqual(LocalDate.now())){
												d.tasksDone++;
												done.setOnAction(new EventHandler<ActionEvent>()
														{
													@Override
													public void handle(ActionEvent e)
													{
														// disable action after one use
													}
												});
											}
										}
									}
								}
							}

						});
						vbox.getChildren().add(done);
					}
					
					d1.tasksOnTheDay.add( temp );
					temp.timeSpent+=1;				// Each task is given 1 hr
					temp.calcWeight(j);
					if(temp.timeSpent < temp.timeExpected)
						q.add(temp);
				}
				else
					break;
			}
			int w=0;
			int p =0;
			for(Event event : eventList){
				if(event.dateOfEvent.isEqual(LocalDate.now().plusDays(j))){
					if(p==0){
						Label events = new Label("Events : ");
						events.setId("Events");
						vbox.getChildren().add(events);
						p=1;
					}
					w++;
					Label n = new Label("  " + w + ". " + event.name);
					n.setId("EventName");
					Label time = new Label("       " + event.timeOfEvent.toString()
							+ "  " + event.dateOfEvent.toString());
					time.setId("EventTime");
					Label d = new Label("        " + event.details);
					d.setId("EventDetails");
					vbox.getChildren().addAll(n,time,d);
				}
			}
			week.add(d1);
			System.out.println();
			d1 = new Day(LocalDate.now().plusDays(j+1));
			root.setVmax(440);
			root.setPrefSize(115, 150);
			root.setContent(vbox);
		}
		days = week;
	}

	public static void main(String[] args) throws IOException, ClassNotFoundException
	{
		addDefaultEvents();
		EventPersist.retrieve();		// retrieves all the serialized events from 'Events.txt'
		
		start(); // starts the thread
		launch(args);
	}

}

/**   
 *  This file is part of SimpleCalendar.
    
 *  SimpleCalendar is free software: you can redistribute it and/or modify   
 *  it under the terms of the GNU General Public License as published by   
 *  the Free Software Foundation, either version 3 of the License, or   
 *  (at your option) any later version.
     
 *  SimpleCalendar is distributed in the hope that it will be useful,   
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of   
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   
 *  GNU General Public License for more details.

 *  <http://www.gnu.org/licenses/>.
     
 */
package simple_calendar.simple_calendar;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.ScrollPane.ScrollBarPolicy;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;

public class SimpleCalendarDemo extends Application
{

	static public List<Event> eventList = new ArrayList<Event>();
	
	static private Stage thisStage;
	static private DatePickerNew simpleCal;
	
	public void setStage (Stage stage){
		thisStage = stage;
	}

	public void showStage(){
		thisStage.setTitle("Titel in der MainController.java ge√§ndert");
		thisStage.show();
	}
	
	static public void update(){
		deletePriviousEvents();
		sortEvents();
		SimpleCalendarDemo.simpleCal.setDayCells();
	}
	
	private static void deletePriviousEvents() {
		LocalDate d = LocalDate.now();
		List<Event> list = new ArrayList<Event>();
		for(Event e : eventList){
			if(!e.dateOfEvent.isBefore(d)){
				list.add(e);
			}
		}
		eventList = list;
	}

	private static void sortEvents() {
		Collections.sort(eventList, new Comparator<Event>() {
			public int compare(Event c1, Event c2) {
				if(c1.dateOfEvent.isBefore(c2.dateOfEvent))
					return -1;
				else if(c1.dateOfEvent.isAfter(c2.dateOfEvent))
					return 1;
				else{
					if(c1.timeOfEvent.isBefore(c2.timeOfEvent))
						return -1;
					else
						return 1;
				}
			}
		});
	}

	@Override
	public void start(Stage stage) throws Exception
	{
		
		stage.setTitle("Make new Event");
		StackPane root = new StackPane();
		root.setId("root");
		Scene scene = new Scene(root, 600, 400);
		stage.setScene(scene);

		scene.getStylesheets().addAll(
				SimpleCalendarDemo.class.getResource(
						"style/simple_calendar.css").toExternalForm());

		VBox vbox = new VBox(20);
		vbox.setAlignment(Pos.TOP_CENTER);
		Label label = new Label("Calendar App");
		label.setId("NameLabel");
		label.setTextAlignment(TextAlignment.CENTER);

		Label enterDate = new Label("Enter the date");
		enterDate.setId("EnterDateLabel");
		enterDate.setAlignment(Pos.TOP_LEFT);

		HBox dateBox = new HBox(15);
		dateBox.setAlignment(Pos.BASELINE_CENTER);
		final TextField dateField = new TextField("Selected date");
		dateField.setEditable(false);
		dateField.setDisable(true);

		simpleCal = new DatePickerNew();
		simpleCal.setAlignment(Pos.CENTER_LEFT);
		simpleCal.dateProperty().addListener(new ChangeListener<Date>()
		{
			@Override
			public void changed(ObservableValue<? extends Date> ov,
					Date oldDate, Date newDate)
			{
				dateField.setText((new SimpleDateFormat("dd/MM/yyyy"))
						.format(newDate));
			}
		});

		
		// For testing purposes, adding 2 default events to the EventList
//		addDefaultEvents();

		
		Button b = new Button();
		b.setText("Add New Event");
		b.setOnAction(new EventHandler<ActionEvent>()
		{
			@Override
			public void handle(ActionEvent e)
			{
				Stage stage = new Stage();
				// Fill stage with content
				try
				{
					addEventDetailsWindow(stage);
					stage.show();
				} catch (Exception e1)
				{
					System.out.println("Couldn't load EventPage");
					e1.printStackTrace();
				}
			}
		});
		
		
		Button showAllEvents = new Button();
		showAllEvents.setText("Show All Events");
		showAllEvents.setOnAction(new EventHandler<ActionEvent>()
		{
			@Override
			public void handle(ActionEvent e)
			{

				Stage stage = new Stage();
				try
				{
					showEventDetailsWindow(stage);
					stage.show();
				} catch (Exception e1)
				{
					System.out.println("Couldn't load EventPage");
					e1.printStackTrace();
				}
			}

		});

		dateBox.getChildren().addAll(simpleCal);
		vbox.getChildren().addAll(label, enterDate, dateBox, b, showAllEvents);
		root.getChildren().add(vbox);
		thisStage = stage;
		thisStage.show();

	}

	public void showEventDetailsWindow(Stage stage)
	{
		stage.setTitle("All Events");

		ScrollPane root = new ScrollPane();
		root.setId("root");
		Scene scene = new Scene(root, 400, 400);
		stage.setScene(scene);
		root.setHbarPolicy(ScrollBarPolicy.NEVER);
		root.setVbarPolicy(ScrollBarPolicy.ALWAYS);

		scene.getStylesheets().addAll(
				SimpleCalendarDemo.class.getResource(
						"style/simple_calendar.css").toExternalForm());

		VBox vbox = new VBox(20);
		vbox.setAlignment(Pos.TOP_LEFT);

		Label today = new Label("    Today:");
		today.setId("TodayLabel");
		today.setAlignment(Pos.TOP_LEFT);

		vbox.getChildren().add(today);
		int w = 0;
		for (Event event : eventList)
		{
			LocalDate d = LocalDate.now();
			if(!event.dateOfEvent.isBefore(d)  && !event.dateOfEvent.isAfter(d))
			w++;
			Label name = new Label("  " + w + ". " + event.name);
			name.setId("EventName");
			Label time = new Label("       " + event.timeOfEvent.toString()
					+ "  " + event.dateOfEvent.toString());
			time.setId("EventTime");
			Label details = new Label("        " + event.details);
			details.setId("EventDetails");
			vbox.getChildren().addAll(name, time, details);
		}
		;
		root.setVmax(440);
		root.setPrefSize(115, 150);
		root.setContent(vbox);
	}

	
	public static void addDefaultEvents()
	{
		eventList.add(new Event("Stagecoach", "CLT", 11, 4, 2015, 18, 00));
		eventList.add(new Event("Final", "BBall Court", 13, 4, 2015, 18, 00));
	}
	
	
	public void addEventDetailsWindow(Stage stage) throws Exception
	{
		Parent root;
		stage.setTitle("Add New Event");

		try
		{
			root = FXMLLoader.load(getClass().getResource("EventWindow.fxml"));
		} catch (IOException e)
		{
			System.out.println("naa ho paaya");
			e.printStackTrace();
			return;
		}

		Scene scene = new Scene(root);
		stage.setScene(scene);
		stage.sizeToScene();
	}

	public static void main(String[] args)
	{
		launch(args);
	}

}
